// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "test_vec_t.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic test_vec_t::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic test_vec_t::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> test_vec_t::ap_ST_st1_fsm_0 = "1";
const sc_lv<2> test_vec_t::ap_ST_st2_fsm_1 = "10";
const sc_lv<32> test_vec_t::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> test_vec_t::ap_const_lv1_1 = "1";
const sc_lv<32> test_vec_t::ap_const_lv32_1 = "1";
const sc_lv<4> test_vec_t::ap_const_lv4_3 = "11";
const sc_lv<4> test_vec_t::ap_const_lv4_0 = "0000";

test_vec_t::test_vec_t(sc_module_name name) : sc_module(name), mVcdFile(0) {
    abrr_elems_U = new test_vec_t_abrr_elems("abrr_elems_U");
    abrr_elems_U->clk(ap_clk);
    abrr_elems_U->reset(ap_rst);
    abrr_elems_U->address0(abrr_elems_address0);
    abrr_elems_U->ce0(abrr_elems_ce0);
    abrr_elems_U->we0(abrr_elems_we0);
    abrr_elems_U->d0(abrr_elems_d0);
    abrr_elems_U->q0(abrr_elems_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_abrr_elems_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_abrr_elems_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_abrr_elems_d0);
    sensitive << ( i );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_abrr_elems_we0);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_return);
    sensitive << ( i );
    sensitive << ( abrr_elems_q0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );

    SC_METHOD(thread_ap_sig_bdd_18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_bdd_43);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_bdd_18 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_bdd_43 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "test_vec_t_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, i, "(port)i");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_bdd_18, "ap_sig_bdd_18");
    sc_trace(mVcdFile, abrr_elems_address0, "abrr_elems_address0");
    sc_trace(mVcdFile, abrr_elems_ce0, "abrr_elems_ce0");
    sc_trace(mVcdFile, abrr_elems_we0, "abrr_elems_we0");
    sc_trace(mVcdFile, abrr_elems_d0, "abrr_elems_d0");
    sc_trace(mVcdFile, abrr_elems_q0, "abrr_elems_q0");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_bdd_43, "ap_sig_bdd_43");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("test_vec_t.hdltvin.dat");
    mHdltvoutHandle.open("test_vec_t.hdltvout.dat");
}

test_vec_t::~test_vec_t() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete abrr_elems_U;
}

void test_vec_t::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void test_vec_t::thread_abrr_elems_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        abrr_elems_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        abrr_elems_address0 = ap_const_lv4_3;
    } else {
        abrr_elems_address0 = "XXXX";
    }
}

void test_vec_t::thread_abrr_elems_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)))) {
        abrr_elems_ce0 = ap_const_logic_1;
    } else {
        abrr_elems_ce0 = ap_const_logic_0;
    }
}

void test_vec_t::thread_abrr_elems_d0() {
    abrr_elems_d0 = i.read();
}

void test_vec_t::thread_abrr_elems_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()))) {
        abrr_elems_we0 = ap_const_logic_1;
    } else {
        abrr_elems_we0 = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_return() {
    ap_return = (!abrr_elems_q0.read().is_01() || !i.read().is_01())? sc_lv<32>(): (sc_biguint<32>(abrr_elems_q0.read()) + sc_biguint<32>(i.read()));
}

void test_vec_t::thread_ap_sig_bdd_18() {
    ap_sig_bdd_18 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void test_vec_t::thread_ap_sig_bdd_43() {
    ap_sig_bdd_43 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void test_vec_t::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_bdd_18.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_bdd_43.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void test_vec_t::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void test_vec_t::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i\" :  \"" << i.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

